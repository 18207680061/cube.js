{"componentChunkName":"component---guides-base-src-templates-post-jsx","path":"/analytics-api-with-cube-js","result":{"data":{"markdownRemark":{"html":"<p>We'll build our analytics API on top of the Athena with <a href=\"https://github.com/cube-js/cube.js\">Cube.js</a>. Cube.js is an open-source framework for building analytical web applications. It creates an analytics API on top of the database and handles things like SQL organization, caching, security, authentication, and much more.</p>\n<p>Let's install Cube.js CLI and use it to create our application. Run the following commands in your terminal:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g cubejs-cli\n$ cubejs create react-dashboard -d athena</code></pre></div>\n<p>Once run, the <code class=\"language-text\">create</code> command will create a new project directory that contains the scaffolding for your new Cube.js project. Cube.js uses environment variables starting with CUBEJS_ for configuration. To configure the connection to Athena, we need to specify the AWS access and secret keys with the access necessary to run Athena queries, and the target AWS region and S3 output location where query results are stored.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">CUBEJS_DB_TYPE=athena\nCUBEJS_AWS_KEY=&lt;YOUR ATHENA AWS KEY HERE&gt;\nCUBEJS_AWS_SECRET=&lt;YOUR ATHENA SECRET KEY HERE&gt;\nCUBEJS_AWS_REGION=&lt;AWS REGION STRING, e.g. us-east-1&gt;\n# You can find the Athena S3 Output location here: https://docs.aws.amazon.com/athena/latest/ug/querying.html\nCUBEJS_AWS_S3_OUTPUT_LOCATION=&lt;S3 OUTPUT LOCATION&gt;</code></pre></div>\n<p>Next, let's create a sample data schema for our events. Cube.js uses the data schema to generate SQL code, which will be executed in the database. The data schema is not a replacement for SQL. It is designed to make SQL reusable and give it a structure while preserving all of its power. We can build complex data models with Cube.js data schema. You can learn more about <a href=\"https://cube.dev/docs/getting-started-cubejs-schema\">Cube.js data schema here</a>.</p>\n<p>Create a <code class=\"language-text\">schema/Events.js</code> file with the following content.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">cube</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Events</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  sql<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    SELECT\n      event_id,\n      event,\n      platform,\n      derived_tstamp,\n      domain_sessionidx,\n      domain_sessionid,\n      domain_userid,\n      ROW_NUMBER() OVER (PARTITION BY domain_sessionid ORDER BY derived_tstamp) AS event_in_session_index\n    FROM\n       analytics.snowplow_events\n  </span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n\n  measures<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    count<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">count</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  dimensions<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    timestamp<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">time</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      sql<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">derived_tstamp</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    id<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      sql<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">event_id</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      type<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">string</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      primaryKey<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Please, note that we query <code class=\"language-text\">snowplow_events</code> table from <code class=\"language-text\">analytics</code> database.\nYour database and table name may be different</p>\n<p>Now, we can start Cube.js server and open <a href=\"http://localhost:4000\">http://localhost:4000</a>. In development mode, Cube.js run Playground. It is an application to help you explore the data schema and send test queries.</p>\n<p>Let's test our newly created data schema!\nCube.js accepts queries as JSON objects in the <a href=\"https://cube.dev/docs/query-format\">specific query format</a>. Playground lets you visually build and explore queries. For example, we can construct the test query to load all the events over time. Also, you can always inspect the underlying JSON query by clicking <strong>JSON Query</strong> button.</p>\n<p><img src=\"https://cube.dev/downloads/media/web-analytics-json-query.gif\"></p>\n<p>You can explore other queries as well, test different charting libraries used to\nvisualize results and explore the frontend javascript code. If you are just starting with Cube.js I recommend checking <a href=\"https://cube.dev/blog/cubejs-open-source-dashboard-framework-ultimate-guide/\">this tutorial</a> as well.</p>\n<p>In the next part, we'll start working on the frontend application and will\nsteadily build out our data schema.</p>","timeToRead":2,"excerpt":"We'll build our analytics API on top of the Athena with Cube.js. Cube.js is an open-source framework for building analytical webâ€¦","frontmatter":{"title":"Analytics API with Cube.js"},"fields":{"slug":"/analytics-api-with-cube-js"}}},"pageContext":{"config":{"siteTitle":"Building an Open Source Web Analytics Platform","siteTitleShort":"Building an Open Source Web Analytics Platform","siteTitleAlt":"Building an Open Source Web Analytics Platform","siteLogo":"/logos/icon.png","previewImage":"/logos/preview.png","siteUrl":"https://web-analytics.cube.dev","siteDescription":"Learn how to build open source web analytics platform with Cube.js.","googleAnalyticsID":"UA-70480064-3","themeColor":"#c62828","backgroundColor":"#e0e0e0","pathPrefix":"","githubUrl":"https://github.com/cube-js/cube.js/tree/master/examples/web-analytics"},"slug":"/analytics-api-with-cube-js","nexttitle":"Frontend App with React and Material UI","nextslug":"/frontend-app-with-react-and-material-ui","prevtitle":"Data Collection and Storage","prevslug":"/data-collection-and-storage","tableOfContents":[{"node":{"fields":{"slug":"/overview"},"frontmatter":{"title":"Overview","order":1}}},{"node":{"fields":{"slug":"/data-collection-and-storage"},"frontmatter":{"title":"Data Collection and Storage","order":2}}},{"node":{"fields":{"slug":"/analytics-api-with-cube-js"},"frontmatter":{"title":"Analytics API with Cube.js","order":3}}},{"node":{"fields":{"slug":"/frontend-app-with-react-and-material-ui"},"frontmatter":{"title":"Frontend App with React and Material UI","order":4}}},{"node":{"fields":{"slug":"/building-a-dashboard"},"frontmatter":{"title":"Building a Dashboard","order":5}}},{"node":{"fields":{"slug":"/adding-interactivity"},"frontmatter":{"title":"Adding Interactivity","order":6}}},{"node":{"fields":{"slug":"/performance-and-cost-optimization"},"frontmatter":{"title":"Performance and Cost Optimization","order":7}}}]}},"staticQueryHashes":[]}